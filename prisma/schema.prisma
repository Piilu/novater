// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// model MyDate {
//     id            String     @id @default(uuid())
//     date          String
//     timezone_type Int
//     timezone      String
//     ticket        Ticket[]
//     start         Schedule[] @relation("start")
//     end           Schedule[] @relation("end")
// 	@@map("MyDate")
// }

model Ticket {
    id        String      @id @default(uuid())
    expires   DateTime
    companies Company[]
    schedules Schedule[]
    routeData RouteData[]
    routes    Route[]
    createdAt DateTime    @default(now())
}

model Route {
    id       String    @id @default(uuid())
    distance String
    from     RouteData @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
    to       RouteData @relation("to", fields: [toId], references: [id], onDelete: Cascade)
    fromId   String
    toId     String
    ticket   Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId String
}

model RouteData {
    id       String  @id @default(uuid())
    name     String
    from     Route[] @relation("from")
    to       Route[] @relation("to")
    ticket   Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId String
}

model Schedule {
    id        String   @id @default(uuid())
    price     Float
    start     DateTime
    end       DateTime
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String
    ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId  String
}

model Company {
    id        String     @id @default(uuid())
    state     String
    schedules Schedule[]
    ticket    Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId  String
}
